/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import entidades.AnalisadorSemantico;
import entidades.AnalisadorSintatico;
import entidades.TipoLex;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Rui Malemba
 */
public class FrmIndex extends javax.swing.JFrame {

    /**
     * Creates new form FrmEditorText
     */
    ArrayList<TipoLex> res;
    String str = "";
    private int previewValue = 0;
    long tempoInicial = 0;
    public FrmIndex(String str) {
        initComponents();
        //****TELA
        txtAreaResult.setWrapStyleWord(true);
        txtAreaResult.setLineWrap(true);
        this.setLocationRelativeTo(null); // centraliza o JFrame
        this.setResizable(false);
        this.str = str;
        txtAreaInput.setText(str);

        
        //Quando o texto do textarea principal/input a funcão apresentar linhas atualiza
        txtAreaInput.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {

                apresentarLinhas();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                apresentarLinhas();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                //apresentarLinhas();
            }
        });
        
        //Sincronizar scroll
        
        jScrollPane1.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                int value = e.getValue();
                JScrollBar scrollBar2 = jScrollPane3.getVerticalScrollBar();
                
                int currentValue = e.getValue();
                if(currentValue > previewValue)//descendo
                    scrollBar2.setValue(value+100);
                else if(currentValue < previewValue)
                    scrollBar2.setValue(value);//subindo
                previewValue = currentValue;
                
                //scrollBar2.setValue(value+100);
            }
        });
        jScrollPane3.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                int value = e.getValue();
                JScrollBar scrollBar2 = jScrollPane1.getVerticalScrollBar();
                
                int currentValue = e.getValue();
                if(currentValue > previewValue)//descendo
                    scrollBar2.setValue(value+100);
                else if(currentValue < previewValue)
                    scrollBar2.setValue(value);//subindo
                previewValue = currentValue;
                
                //scrollBar2.setValue(value+100);
            }
        });
        
        //Tornar a barra versitical invisivel
        jScrollPane3.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        //Chamar no caso o form ser chamado pelo segundo form
        apresentarLinhas();
        
    }

    private void apresentarLinhas() {
        int qtdLinhas = 0;
        String txt = "";
        Scanner scanner = new Scanner(txtAreaInput.getText());
        while (scanner.hasNextLine()) {
            scanner.nextLine();
            qtdLinhas++;
        }
        for (int i = 0; i < qtdLinhas; i++) {
            txt += (i + 1) + "\n";
        }
        txtAreaLinha.setText(txt);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaInput = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnExecutar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaResult = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaLinha = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MINI COMPILADOR");
        setBackground(new java.awt.Color(0, 0, 0));

        txtAreaInput.setColumns(20);
        txtAreaInput.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtAreaInput.setForeground(new java.awt.Color(51, 51, 51));
        txtAreaInput.setRows(5);
        txtAreaInput.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                txtAreaInputComponentAdded(evt);
            }
        });
        txtAreaInput.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtAreaInputInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(txtAreaInput);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Código Fonte em C:");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("ANALISADOR SEMÂNTICO");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );

        btnExecutar.setBackground(new java.awt.Color(0, 153, 153));
        btnExecutar.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        btnExecutar.setForeground(new java.awt.Color(255, 255, 255));
        btnExecutar.setText("Executar");
        btnExecutar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                btnExecutarMouseMoved(evt);
            }
        });
        btnExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        txtAreaResult.setEditable(false);
        txtAreaResult.setColumns(20);
        txtAreaResult.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtAreaResult.setForeground(new java.awt.Color(51, 51, 51));
        txtAreaResult.setRows(5);
        txtAreaResult.setBorder(null);
        txtAreaResult.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(txtAreaResult);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("run:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        txtAreaLinha.setEditable(false);
        txtAreaLinha.setColumns(20);
        txtAreaLinha.setFont(new java.awt.Font("Century Gothic", 0, 16)); // NOI18N
        txtAreaLinha.setForeground(new java.awt.Color(51, 51, 51));
        txtAreaLinha.setRows(5);
        jScrollPane3.setViewportView(txtAreaLinha);

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Copyright 2023 Rui Yuri Joaquim Malemba");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(367, 367, 367)
                                .addComponent(jLabel4)))))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addComponent(btnExecutar, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExecutar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutarActionPerformed

        if (txtAreaInput.getText().toString().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Atenção: Deve inserir o código fonte, antes.");
            return;
        }
        try {
            String path = "programaC.txt";
            
            
            
            //Gravar o textArea em um ficheiro programaC
            tempoInicial = System.currentTimeMillis();
            gravarTxt(path);

            //****** OBJECTO ANALIZADOR SINTÁTICO
            AnalisadorSemantico analiserSemantico = new AnalisadorSemantico(path);
            res = analiserSemantico.program();
            
            long tempoFinal = System.currentTimeMillis();
            long tempoTotal = tempoFinal - tempoInicial; //tempo em millisegundo
            if (res.get(0).getListaDeErros().size() > 0) {
                String txt = "BUILD FAILED (total time: "+(tempoTotal/1000.0)+" seconds)";
                txt += "\n\nTotal de Erros: " + res.get(0).getListaDeErros().size() + "\n\n";
                for (String erro : res.get(0).getListaDeErros()) {
                    
                    txt += erro + "\n\n";
                }
                
                txtAreaResult.setText(txt);
                txtAreaResult.setForeground(Color.red);
                return;
            }
            txtAreaResult.setText("BUILD SUCCESSFUL (total time: "+(tempoTotal/1000.0)+" seconds)");
            txtAreaResult.setForeground(Color.GREEN);

            Thread thread = new Thread(() -> {
                try {
                    Thread.sleep(1800);//1 segundos
                    //Chamar formulario de resultados
                    FrmResult frmResult = new FrmResult(res, txtAreaInput.getText().toString());
                    frmResult.setVisible(true);
                    dispose(); //Fecha a tela atual
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            thread.start();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu algum erro no analisador." + e);
        }
    }//GEN-LAST:event_btnExecutarActionPerformed

    private void btnExecutarMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExecutarMouseMoved
        // TODO add your handling code here:
        btnExecutar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btnExecutarMouseMoved

    private void txtAreaInputInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtAreaInputInputMethodTextChanged
        // txtAreaLinha.setText("Olá Rui");
    }//GEN-LAST:event_txtAreaInputInputMethodTextChanged

    private void txtAreaInputComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_txtAreaInputComponentAdded
        //txtAreaLinha.setText("Olá Rui");
    }//GEN-LAST:event_txtAreaInputComponentAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmIndex.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmIndex("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExecutar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtAreaInput;
    private javax.swing.JTextArea txtAreaLinha;
    private javax.swing.JTextArea txtAreaResult;
    // End of variables declaration//GEN-END:variables

    private void gravarTxt(String path) {

        BufferedWriter writer;
        try {
            writer = new BufferedWriter(new FileWriter(path, false));

            writer.write(txtAreaInput.getText().toString());

            writer.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }

}
